[{"categories":["個人筆記"],"contents":"JAVA 常⽤的庫存⽅法 ( Java 語⾔提供的⽅法 ) Scanner 類別  由 「 鍵盤 」 讀⼊資料 不是 Java 內建的類別，所以需要使用時要加⼊ 「 import java.util.Scanner;」 相關語法：  (1) –hasNextInt() // 如果輸⼊緩衝區內有⼀個可解釋為整數的記號 –nextInt() // 讀取輸⼊緩衝區內的記號並將它轉換為整數  (2) –hasNextDouble() // 如果輸⼊緩衝區內有⼀個可解釋為浮點數的記號 –nextDouble() // 讀取輸⼊緩衝區內的記號並將它轉換為浮點數  (3) –hasNextBoolean() // 如果輸⼊緩衝區內有⼀個可解釋為布林值的記號 –nextBoolean() // 讀取輸⼊緩衝區內的記號並將它轉換為布林值  (4) –hasNext() // 如果輸⼊緩衝區內有⼀個記號 –next() // 讀取輸⼊緩衝區內的記號並將它轉換為字串  範例： System.out.println(\u0026#34;What\u0026#39;s your name?\u0026#34;); if(scan.hasNext()){ str = scan.next(); }  有緩衝區：需要按 enter 鍵代表輸⼊的動作\n  has 系列代表的是：可以先看看下⼀個輸⼊的值是不是需要的資料型態\n 類別宣告變數 → 物件導向  程式設計⽅法  結構化  循序式 ( sequence ) 迴圈式 ( iteration ) 選擇式 ( selection )   物件導向  ⼀個類別 ( class ) 包含屬性、⽅法和建構⼦   泛型     資料 + 演算法 → 程式\n  演算法：程式執⾏的先後順序 結構化設計⽅法，在意的是 「 演算法 」 物件導向設計⽅法，在意的是 「 資料 」  物件導向定義物件： 類別名稱 變數名稱 = new 建構⼦; // 類別名稱和建構⼦同名  範例： String str = new String(“ABC”); // 也可寫成 String str = “ABC”; 敘述 Statements  由 運算⼦、運算元及關鍵字所組成，可完成特定⼯作 流程控制敘述 可以控制程式的執⾏ 敘述⼀定要以 分號做為結束 ( if else 除外 ) 敘述⼀定要出現在⼀對⼤括弧 ( 稱為區塊 ) 之內  區塊 block  由 ⼀對⼤括弧所包起的連續敘述，它們在邏輯上是屬於⼀體的，必須⼀起被執⾏ 每對⼤括弧都標⽰出⼀個範圍，在該範圍內定義的變數只在其內有效   ( 區塊內部的變數，外部不會認得；但外⾯的變數，內部會認得 )\n  每個區塊皆可以定義變數，但是內層區塊所定義的區域變數不能與外層區塊已定義的區域變數同名 → 不同內部的變數名稱可以相同；但內部的變數名稱不可與外部的相同 ⼤括弧可以出現在另⼀對⼤括弧之內，構成 巢狀區塊 ( nested loop )  選擇式敘述 ( selection ) 結構 if else敘述 (1) if... if(條件判斷){ // 條件判斷，如果為 true 就執⾏⼤括號；反之跳出區塊 // 判斷為 true 時執⾏ // 執⾏次數只有 0 次和 1 次 的分別 } (2) if...else... if(條件判斷){ // 條件判斷，為 true 就執⾏ if ⼤括號；為 false 就執⾏ else ⼤括號 // 判斷為 true 時執⾏ // 2 選 1 }else{ // 判斷為 false 時執⾏ } (3) if...else if...else if(條件判斷){ // 條件判斷，為 true 就執⾏ if ⼤括號 // 判斷為 tru e時執⾏ // 為 false 就跳到 else if ⼤括號，再做 else if 的條件判斷 }else if(條件判斷){ // 為 true 就執⾏ else if ⼤括號；為 false 就執⾏ else ⼤括號 ... }else{ ... }  條件必須要以 ⼀對⼩括弧包起\n switch 敘述 ( 可搭配 break 使⽤ ) switch(expression條件判斷){ case 1 : …statement; (break; →執⾏完跳出迴圈) // 可加可不加 case 2 : …statement; break; case 3 : …statement; (break;) . . . defalut: // 所有 case 以外的狀況 …statement; // defalut: 有沒有敘述都可以 (break;) }  精神關鍵：把 ⼀組相關的資料 ( 要同時處理的 ) ⼀起處理\n  expression ( 條件判斷 ) 的值應為 byte、short、char、int 中的⼀種\n 迴圈式敘述 ( iteration ) 結構  對於⼀組 需要進⾏相同運算的資料就需要以迴圈來處理  while 迴圈   步驟：\n 判斷條件的真假，若為假，則停⽌ while 敘述的執⾏；若為真，則執⾏迴圈本體內的敘述⼀次 重複執⾏步驟⼀直到條件為假    範例：\n  for 迴圈   步驟：\n 執⾏「 初值設定 」內的敘述⼀次 條件判斷：若為假，則停⽌ for 敘述的執⾏；若為真，則執⾏「 迴圈本體 」內的敘述⼀次 執⾏「 條件更新 」內的敘述⼀次 執⾏步驟 2    範例：\n   for 迴圈的 「初值 \u0026amp; 判斷式 \u0026amp; 條件更新」可以寫在 block 內 ，但是 兩個分號⼀定要有！！！\n do while 迴圈   步驟：\n 執⾏ do-while 敘述 body 內的敘述⼀次 條件判斷：若為假，則停⽌ do-while 敘述的執⾏；若為真，則執⾏ do-while 敘述body內的敘述⼀次 → 條件更新也在敘述 body 裡 執⾏步驟 2    範例：\n  ","permalink":"https://iris0530.github.io/blog/java-note-7/","tags":["Java","notes"],"title":"Java 個人筆記 - 7"},{"categories":["個人筆記"],"contents":"JAVA 運算⼦ 單元運算⼦ → ⼜稱 「 單⼀運算元 」 ( cast ) ： 型態轉換運算⼦  依照運算的形式來區分⼜可分為 『 運算式內之型態轉換 』 與 『 指定運算運算式內的型態轉換 』 兩種  運算式內之型態轉換：Java 會代勞某些形式的型態轉換 → 稱為 「 隱含轉換 」  short、byte 、char → int 運算式內有 double 型態的運算元 → 所有運算元皆升級為 double，且運算結果為 double 運算式內有 float 型態的運算元 → 所有運算元皆升級為 float，且運算結果為 float 運算式內有 long 型態的運算元 → 所有運算元皆升級為 long，且運算結果為 long   指定運算運算式內的型態轉換：必須由程式師來進⾏型態轉換 → 稱為 「 強迫轉換 」    // (type) (expression) ;  char ch = \u0026#39;A\u0026#39;; ch = (char)(ch + 1); System.out.print(ch); // --\u0026gt; B  窄的資料轉換為寬的資料時，不會發⽣資料遺失的情形，反之則不然   任何型態轉換都 不包括 boolean 型態的資料\n 關係運算⼦ ( ⼜稱⽐較運算⼦ ) 邏輯運算⼦  \u0026amp; ( 且 ) ：當兩個都是真時，結果為真，否則結果為假   | ( 或 )：只要有⼀個是真，結果為真，否則結果為假   ^ ( 互斥或 )：相同 ( T T, F F ) 為假，相異 ( T F, F T ) 為真  短路運算⼦ \u0026amp;\u0026amp; , || 條件運算⼦ ( 三元運算⼦ ) ? : 語法： ( 條件判斷 ) ? value 1 ：value 2; // 條件判斷 // 為 true 的話，輸出 value 1 // 為 false 的話，輸出 value 2 指定運算⼦ = 與 OP=  等號的左值必須是變數，右值無所謂 ( 可以是變數、常數、合法的算式 ) 它的運算優先順序是所有運算⼦中 最低的 OP= → += , −= , *= , /= , %= 等  常⽤的庫存⽅法 ( Java 語⾔提供的⽅法 )  基本資料型態沒有⽅法可以⽤，包裝類別才有⽅法⽤\n  取亂數的⽅法  ","permalink":"https://iris0530.github.io/blog/java-note-6/","tags":["Java","notes"],"title":"Java 個人筆記 - 6"},{"categories":["個人筆記"],"contents":"JAVA 運算⼦  先乘除 ， 後加減 ， 括弧優先 ， 等號最後被處理\n  運算⼦ (⼜稱為運算符號)：可對⼀個以上的 變數或常數 ( 稱為運算元 ) 進⾏運算，產⽣新的資料，此新值可再參與其它的運算 結合性：從誰先做運算要先說明   共⽤：符號有多種意思，ex. ( + ) → ( 正 / 加 ) ( - ) → ( 負 / 減 )\n 指定運算⼦ = ( 等號，Assignment )  等號的左值必須是變數，右值無所謂 ( 可以是變數、常數、合法的算式 ) 它的運算優先順序是所有運算⼦中 最低的  x = y = z = 100; 算術運算⼦ + - / * % 加法 +  只要是 數值性資料，便可相加，如 「 整數、浮點數、 字元 」 皆可相加  char ch = \u0026#39;A\u0026#39;; ch = ch + 1;  溢位：指運算結果 超過整數所能表⽰的最⼤值 ( 或最⼩值 )，因此當發⽣溢位時，程式無法產⽣正確的結果\n 乘法運算⼦ ( * ) 與 除法運算⼦ ( / ) 與 取餘數運算⼦ ( % )  整數除法只取其商，餘數無條件捨去 浮點數相除，產⽣的結果為浮點數 浮點數運算完後，若超過⼀定的範圍，會⽤ 科學記號 表⽰ 浮點數 \u0026quot; 除以零 \u0026ldquo;會得到 Infinity ( 正無限⼤ ) 或 -Infinity ( 負無限⼤ ) 0.0 除以 0.0 會得到 NaN ( Not-a-Number ) % 左邊的運算元 ( → 被除數 ) 的正負號就是最終結果的正負號  單元運算⼦ → ⼜稱 「 單⼀運算元 」 否定運算⼦ ( not 運算 ) → 「 ! 」  只能⽤在 boolean 型態  !true --\u0026gt; false !false --\u0026gt; true ( cast ) ： 型態轉換運算⼦  依照運算的形式來區分⼜可分為 『 運算式內之型態轉換 』 與 『 指定運算運算式內的型態轉換 』 兩種  運算式內之型態轉換：Java 會代勞某些形式的型態轉換 → 稱為 「 隱含轉換 」 指定運算運算式內的型態轉換：必須由程式師來進⾏型態轉換 → 稱為 「 強迫轉換 」    char ch = \u0026#39;A\u0026#39;; ch = (char)(ch + 1); System.out.print(ch); // --\u0026gt; B ","permalink":"https://iris0530.github.io/blog/java-note-5/","tags":["Java","notes"],"title":"Java 個人筆記 - 5"},{"categories":["個人筆記"],"contents":"JAVA 整數型態  將常數指定給整數型態的變數時，不能超過所允許的範圍(值域範圍)   值域範圍：[-2^(n-1)] ~ 0 ~ [2^(n-1)-1] ※「0」在這裡算⼀個正整數\n 整數型態的常數  沒有⼩數點的數值常數 ⼀般預設為 「int」型態 整數常數只有兩種型態： long ( 必須於字尾加上L ) / int ( 字尾不加任何符號 )  (1) int 型態 int x1 = 2147483647; (2) long 型態 long y2 = 2147483648L; //⼀般右邊的值(暫存區)預設的型態為「int」，如要指定存⼊ long 型態的變數，需在最後加上「L」  分為⼗進位、⼋進位、⼗六進位  ⼗進位  ex. 28、52、84、100   ⼋進位  0 開頭的常數視為⼋進位 ex. 0034、0144   ⼗六進位  0x開頭的常數視為⼗六進位，這裡不分⼤⼩寫，後⾯只有 0-9 \u0026amp; a-f ex. 0x1C、0X1C、0x1c、0X1c、0x64      浮點數型態  含有⼩數點的數字稱為浮點數 ⼀般預設為 「double」 型態 浮點數只有 2 種：float ( 4 bytes )、double ( 8 bytes ) float 常數的字尾必須加上 f 或 F  布林 boolean 型態  只有 true 與 false 兩種值 ⽤來表⽰ 「條件成不成⽴」  字元 char 型態變數 / 常數  英⽂字⺟、標點符號、運算符號或中⽂字 1 個字元 ( char ) = 2 bytes = 16 bits 字元為單引號「 ' 」，字串為雙引號「 \u0026quot; 」 資料視為正整數，可參與算術運算  char x1 = \u0026#39;你\u0026#39;; char x2 = \u0026#39;好\u0026#39;; System.out.print(x1 + x2); // → 你好  字元常數也可⽤ 四個⼗六進位的數字 \u0026lsquo;\\udddd\u0026rsquo; 的⽅式來表⽰ → 字元內碼。\\u之後 ⼀定要四個⼗六進位數字，多或少⼀個都不⾏。 對於無法由鍵盤輸⼊的字元可⽤此種⽅式來表⽰。可參照 ascii code 表  char ch1 = \u0026#39;\\u0041\u0026#39;; // → A  每個字元都有 相對應的整數值，可參照 ascii code 表  int n = \u0026#39;A\u0026#39;; System.out.print(n); // → 65 //此為⼗進位的整數值  要特別記的：(1) 48 → 數字 0 (2) 49 → 數字 1 (3) 65 → A (4) 97 → a\n 跳脫字元  若要表⽰ 不易由鍵盤輸⼊的字元 如換⾏字元、Tab字元 對編譯程式易產⽣混淆的字元，如單引號或雙引號 可以⽤下列的⽅式來表⽰：  System.out.printf(\u0026#34;\u0026#39;%c\u0026#39; \\n\u0026#34;,65); // → 顯⽰為「\u0026#39;A\u0026#39;」 //將65轉換成A，並換⾏ System.out.printf(\u0026#34;\\\u0026#34;%c\\\u0026#34; \\n\u0026#34;,65); // → 顯⽰為「\u0026#34;A\u0026#34;」 字串型態的資料  字串為⼀種物件。字串間可以進⾏加 (+) 運算，表⽰要將這 N 個字串合併為⼀個字串  String st1 = \u0026#34;哈囉\u0026#34;; String st2 = \u0026#34;你好\u0026#34;; System.out.println(st1 + st2); // → 顯⽰為「哈囉你好」  字串⻑度可⽤ length() ⽅法算出，會傳回字串內字元的個數  String st1 = \u0026#34;哈囉\u0026#34;; st1.length(); // → 傳回 2 s.length(); // → 傳回 字串變數s的⻑度 \u0026#34;abcde\u0026#34;.length(); // → 傳回 5 ","permalink":"https://iris0530.github.io/blog/java-note-4/","tags":["Java","notes"],"title":"Java 個人筆記 - 4"},{"categories":["個人筆記"],"contents":"JAVA Java 語⾔的基本元素 package (套件) 敘述  必須是原始程式內的 第⼀個敘述，此敘述的前⾯ 只能有空⽩字元與註解 是 Java 語⾔⽤來 區分同名類別的⼀種分辨機制 語法範例：  package ex01; package ex01.ex02; package ex01.ex02....; import 敘述  通知 Java 編譯程式：哪些套件內有它所需要的類別檔 套件 java.lang 內的類別會由編譯程式 ⾃動匯⼊ ( auto-import )，可以不⽤特別匯⼊  (1)匯⼊個別類別 : import java.util.Date; (2)匯⼊整個套件： import java.util.*; 關鍵字 ( Keyword )  Java 語⾔ 區分⼤⼩寫，所有關鍵字 皆為⼩寫字⺟ 在 Java 語⾔中， 具有特殊意義的單字稱為「關鍵字」，語⾔的發明者對它們定義了特定的⽤法 Java 程式中 ⾃⼰命名的(類別名稱、⽅法名稱、變數名稱) 都不能是關鍵字  識別字 ( Identifier )  識別字 ( Identifier )：⾃⼰命名的 以 字⺟( ⼤⼩寫皆可 )、錢號( $ )、或底線( _ )開頭 → 數字不可以在開頭 後續的字元 可為字⺟、錢號( $ )、底線( _ )、數字 識別字不可以是關鍵字  合法的識別字：num , _num , _2num , $num , $_REQUEST , ___ , $$$\r不合法的識別字：123 , 2_num\r變數  變數具有名稱 ( 即識別字 )，佔據記憶體，是⽤來 存放會改變的資料 宣告時需 (1)先定義變數 (2)設定好它的初值 才能使⽤ 變數 ⼀定要有初值 才能參與運算，否則將產⽣語法錯誤 變數不能重複定義 定義(宣告)變數 → 基本形式：資料型態 變數名稱 [= 初值];  int x = 100 ; // 定義變數 x，其初值為100 int y = x + 1 ; // 定義變數 y，其初值為 x+1 x = x + 1 ; // 將 x 指定為原來的 x 值再加 1 常數  值不能改變的資料 每個常數都屬於某種型態  JAVA 的基本型態  整數家族  int byte short long   浮點數家族  double float   布林 ( boolean ) 字元 ( char )  基本資料型態與其儲存⻑度  1 bit 能夠表⽰兩種不同的狀態，如真與假、0與1、開與關等 占記憶體空間，以 1 byte(=8 bits ) 為例  第⼀格(0/1)：0 表示正數，1 表示負數\n剩下7格：有2^7組合：0算正整數，所以值域是 -128 ~ 0 ~ 127\n 值域範圍：[-2^(n-1)] ~ 0 ~ [2^(n-1)-1] ※「0」在這裡算⼀個正整數  溢位  溢位（overflow）：在電腦領域裡所發⽣的溢位條件是，『執⾏單項數值計算時，當計算產⽣出來的結果是⾮常⼤的，⼤於暫存器或記憶體所能儲存或表⽰的能⼒限制時， 超過範圍會從另⼀頭開始算起』 整數常數 ( 預設是 int )，如超出 int 的值域範圍，就會造成「整數溢位」 浮點常數 ( 預設是 double )，如超出 double 的值域範圍，就會造成「浮點數溢位」 以整數溢位舉例：  ","permalink":"https://iris0530.github.io/blog/java-note-3/","tags":["Java","notes"],"title":"Java 個人筆記 - 3"},{"categories":["個人筆記"],"contents":"JAVA 寫程式的七個步驟  確定⽬標 規劃程式 撰寫程式 編譯程式 → 檢查語法是否正確 執⾏程式 測試與除錯 ⼤型程式的保存   符號說明： 「 = 」 → assignment ，指定運算⼦\n  符號說明： 「 ; 」 → 敘述結束的意思\n 整數常數 沒有小數點的數字\n 2 → 整數常數 10 → 整數常數   「整數常數」預設⽤ int 儲存\n 命名原則  駝峰式命名：第⼀個字全部⼩寫，後⾯⾸字⺟⼤寫 公⽤類別 (public class) 名稱必須與類別名稱 完全⼀樣 在 Java 語⾔中⼤⼩寫字⺟ 是不⼀樣的 原始程式可以定義多個類別(classes)，但是 ⾄多只能有⼀個公⽤類別(public class)  套件 package  套件 (package) 是 Java 語⾔⽤來 區分同名類別 的⼀種分辨機制  print(\u0026hellip;); vs. println(\u0026hellip;);  print(\u0026hellip;) 表⽰ 「顯⽰後，不會換⾏」  System.out.print(\u0026#34;Hello, Java world! \u0026#34;);  println(\u0026hellip;) 表⽰ 「顯⽰後，換⾏」  System.out.println(\u0026#34;Hello, Java world! \u0026#34;); Java 原始程式的架構 Java 原始程式由下列三部分所組成：P.I.C  套件敘述 ( package ) 輸⼊敘述 ( import ) 類別的定義 ( class )   每個原始程式最多只能定義⼀個最上層 ( top-level ) 的公⽤類別 ( public class )。\n  如果原始程式含有公⽤類別，則 原始程式的主檔名必須與該類別名稱完全相同。\n  原始檔的副檔名必須是.java。\n ","permalink":"https://iris0530.github.io/blog/java-note-2/","tags":["Java","notes"],"title":"Java 個人筆記 - 2"},{"categories":["個人筆記"],"contents":"JAVA  JAVA 是⼀種結構化的程式語言：1. 循序式（sequence） 2. 迴圈式（iteration） 3. 選擇式（selection）\n JDK 軟體  Java Platform Standard Edition Development Kit 提供開發 Java 應⽤程式所需的⼯具  Java 程式的編譯與執⾏  Java 類別檔可以 跨平台(即跨作業系統) 執⾏  Java 執⾏環境  Java 執⾏環境( JRE, Java Runtime Environment ) 由兩部分組成：  Java虛擬機器( Java Virtual Machine, JVM ) Java應⽤程式介⾯( Java Application Programming Interface, Java API or Java Class Library )     JRE = JVM + Java API\n IDE  Integrated Development Environment 整合的平台，提供撰寫、編譯、執⾏、測試、除錯、包裝應⽤系統的⼀套軟體 Eclipse、IntelliJ IDEA \u0026hellip;etc  JAVA 語法說明 public static void main(String[] args) { // TODO Auto-generated method stub }  「 main 」是函數名稱，是關鍵字\n  ※ main：此⽅法負責跟作業系統溝通。\n 建⽴函數(⽅法)： 需要有傳回值嗎 函數名稱(呼叫該函數時是否要傳參數){\r.....\r}\r範例：\r(1)呼叫時不需要參數，也沒有傳回值\rvoid temp(){\r}\r(2)呼叫時需要傳參數，沒有傳回值\rvoid temp(int n){ //呼叫時需要傳參數，沒有傳回值\r}\r(3)呼叫時需要傳兩個參數，沒有傳回值\rvoid temp(int n, String str){\r}\r(4)呼叫時需要傳參數，有傳回值(int型態)\rint temp(int n){\r}\r--------------------------------------------------------\r呼叫函數(⽅法)範例：\rint ans = temp(10);\r(呼叫temp⽅法並傳⼊\u0026quot;10\u0026quot;這個值，執⾏完的結果會傳回來，再指派給ans)\r","permalink":"https://iris0530.github.io/blog/java-note-1/","tags":["Java","notes"],"title":"Java 個人筆記 - 1"},{"categories":["專案"],"contents":" 專案時間：2021/08 - 2021/11 約 3 個月 專案參與：專案全程參與 專案人數：7人 / 擔任角色：組員 使用技術：資料庫系統MySQL；前端HTML、CSS、JavaScript、jQuery、RWD、Bootstrap、AJAX-Fetch API、Thymeleaf；後端隨著課程學習的進度不斷改進，由最開始的JSP/Servlet +JDBC，演進到Hibernate、Spring、Spring MVC，最終改用Spring Boot技術撰寫專案 使用工具：Eclipse、IntelliJ 專案環境：Server：Apache Tomcat、DB: MySQL 負責區域：初期前端畫面、前端購物車撰寫、註冊前後端撰寫、訂單總覽前後端撰寫、資料庫分析討論以及最後的專案整合  專案介紹 緣起： 『倒垃圾』為生活中的一大課題…不管是什麼身份，身為忙碌現代人的我們，『倒垃圾』已與我們的生活密不可分，但往往又不想老是追著垃圾車跑，或是挑房子時還得特地挑一個有垃圾集中場的地方…總會希望有人可以在自己沒有時間的時候也可以幫忙處理，所以我們的DAOBUNSO就誕生了！\n特色： (1) 方案多元化 (2) 環保商城 (3) 評價機制系統 (4) 解決垃圾處理問題 (5) 擁有時間的掌控權\n實作過程： 在專題製作的過程中會遇到許多問題(如前、後端的串接與技術)，組員們藉著團隊學習，在過程中互相交流、分享與學習新技術，若有不懂處皆會立刻提問與討論以迅速排解問題點，透過互相學習、切磋的方式共同成長、完成專題。雖然在專題過程中，組員們之間也有意見分歧的時候，但透過耐心的溝通與互相的理解，讓我們學習到溝通的重要性，且也學會如何與個性不同的人協同合作之能力。\n心得與反思： 在這次專案中，我們一開始的規劃分配只是簡單的前端和後端，後來發現這樣組員只能練習到部份，無法全部都練習到，使得我們必須重新討論更好的功能分配，讓每位組員都能練習到課程的所學，但也迫使我們必須加緊時間學習並完成分配的工作；從中我們也學習到規劃、管理時間的重要性。除此之外，從專案實作中，不管是自己或是其他組員，都會碰到程式執行的問題，每個人都是每個人的老師，除了自己上網搜尋別人的作法外，也會透過詢問同學解決問題；從中讓我們了解自學的重要和必要性，以及如何與他人溝通討論，讓我們拓展不同的視野和思考方式。\n專案部分畫面 ","permalink":"https://iris0530.github.io/blog/first-project/","tags":["project","group","NTUT","Java017"],"title":"DAOBUNSO 倒幫手 - 第一個團體專案"},{"categories":["程式碼練習"],"contents":"這是我的第二篇文章\nPO文步驟 第一步 在 content 內的 blog 資料夾裡，新增一個 markdown 檔案，例如： XXX.md\n第二步 加入 hugo 文章格式設定 ※ 一定要放在最前面\n依內容修改標題、時間、照片\u0026hellip;\n第三步 撰寫文章內容，完成後存檔\n第四步 回到終端機(cmd)上，輸入 hugo 產生程式碼\n第五步 回到 exampleSite 資料夾，就會發現 public 資料夾裡又更新了很多檔案和資料夾\n第六步 將 public 資料夾內的東西全部複製，然後貼到 clone的 repo 資料夾(github.io)裡面，並全部取代\n第七步 回到 Github Desktop 上，會發現有許多改動的檔案，加上 commit 訊息之後就可以 commit 了\n第八步 再將這個 commit 上傳到 Github\n第九步 回到個人網站上就會看到新PO的文章囉！\n(如果還沒出現，就多等幾分鐘或多重新整理幾次就會看到了)\n","permalink":"https://iris0530.github.io/blog/second-post/","tags":["github pages","practice"],"title":"第二篇文章 - 個人網站PO文練習"},{"categories":["程式碼練習"],"contents":"Hello World\n我是 Iris\n一級標題 二級標題 六級標題 我是 Iris，這是我練習MarkDown語法的地方\n Iris  Chen  是我     Hello   Hello  HAHAHA   你好   How are you?\n 外部超連結\n內部超連結\n我是Iris，這是我練習MarkDown語法的地方 hello\npublic class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Hello World\u0026#34;); } }    Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    Youtube   Twitter Check out the technology preview for GitHub code search, the next iteration for search, discovery, and navigation on GitHub. https://t.co/DcV1RAwNXs pic.twitter.com/ua97dyff7h\n\u0026mdash; GitHub (@github) December 8, 2021  ","permalink":"https://iris0530.github.io/blog/markdown-test/","tags":["markdown","practice"],"title":"第一篇文章 - 第一次練習 Markdown 語法"},{"categories":["Go Language"],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList  List item List item List item List item List item  Unordered List  List item List item List item List item List item  Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let's throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote  This is a blockquote example.\n Inline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n   Markdown Less Pretty     Still renders nicely   1 2 3    Image Youtube video   ","permalink":"https://iris0530.github.io/blog/post-13/","tags":["Photos","Game","HTML","Python","New"],"title":"How To Use Checklists To Improve Your UX"}]